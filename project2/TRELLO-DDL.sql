--Lookup table 1-Employee, 2-Manager
CREATE TABLE ROLE_TYPE
  (
    RT_ID   INT,
    RT_NAME VARCHAR2(4000) UNIQUE,
    PRIMARY KEY(RT_ID)
  );
/
CREATE TABLE TV2_USER
  (
    TV2_ID       INT,
    TV2_FN       VARCHAR2(4000),
    TV2_LS       VARCHAR2(4000),
    TV2_USERNAME VARCHAR2(4000) UNIQUE NOT NULL,
    TV2_PASSWORD VARCHAR2(4000) NOT NULL,
    RT_ID    INT DEFAULT 1 NOT NULL,
    TV2_EMAIL    VARCHAR2(4000),
    PRIMARY KEY(TV2_ID),
    FOREIGN KEY(RT_ID) REFERENCES ROLE_TYPE(RT_ID)
  );
/
--Lookup table
CREATE TABLE CARD
  (
    C_ID INT,
    L_ID INT,
    C_VERIFY INT,
    C_WORTH INT,
    C_TITLE VARCHAR2(4000) UNIQUE,
    C_DESCRIPTION VARCHAR2(4000),
    PRIMARY KEY(C_ID)
  );
/
--Lookup table 1-Pending, 2-Approved, 3-Denied
CREATE TABLE TASK
  (
    T_ID   INT,
    C_ID INT,
    T_COMPLETE INT,
    T_INFO VARCHAR2(4000) UNIQUE,
    PRIMARY KEY(T_ID),
    FOREIGN KEY(C_ID) REFERENCES CARD(C_ID)
  );
/
CREATE TABLE LANE
  (
    L_ID INT,
    B_ID INT,
    L_TITLE VARCHAR2(4000) UNIQUE,
  PRIMARY KEY(L_ID),
  FOREIGN KEY(B_ID) REFERENCES BOARD(B_ID)
  ); 
/
CREATE TABLE BOARD
  (
    B_ID INT,
    TV2_ID INT,
    B_TITLE VARCHAR2(4000) UNIQUE,
  PRIMARY KEY(B_ID),
  FOREIGN KEY(TV2_ID) REFERENCES TV2_USER(TV2_ID)
  );
/
CREATE SEQUENCE role_type_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE tv2_user_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE card_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE board_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE lane_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE task_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER role_type_seq_trg BEFORE
  INSERT ON role_type FOR EACH ROW BEGIN IF :new.rt_id IS NULL THEN
  SELECT role_type_seq.NEXTVAL INTO :new.rt_id FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER user_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID IS NULL THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER card_seq_trg BEFORE
  INSERT ON card FOR EACH ROW BEGIN IF :new.C_ID IS NULL THEN
  SELECT card_seq.NEXTVAL INTO :new.C_ID FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER lane_seq_trg BEFORE
  INSERT ON lane FOR EACH ROW BEGIN IF :new.L_ID IS NULL THEN
  SELECT lane_seq.NEXTVAL INTO :new.L_ID FROM dual;
END IF;
END;

/
CREATE OR REPLACE TRIGGER task_seq_trg BEFORE
  INSERT ON task FOR EACH ROW BEGIN IF :new.T_ID IS NULL THEN
  SELECT task_seq.NEXTVAL INTO :new.T_ID FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER board_seq_trg BEFORE
  INSERT ON board FOR EACH ROW BEGIN IF :new.B_ID IS NULL THEN
  SELECT board_seq.NEXTVAL INTO :new.B_ID FROM dual;
END IF;
END;
/
create or replace TRIGGER user2_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID = 0  THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/
create or replace TRIGGER board2_seq_trg BEFORE
  INSERT ON board FOR EACH ROW BEGIN IF :new.B_ID = 0  THEN
  SELECT board_seq.NEXTVAL INTO :new.B_ID FROM dual;
END IF;
END;
/
COMMIT;
